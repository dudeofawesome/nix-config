name: 'Test'

on:
  push:
    branches: ['**']
    tags-ignore: ['**']
  pull_request:

permissions:
  contents: 'read'

jobs:
  identify:
    runs-on: 'ubuntu-24.04-arm'
    outputs:
      nixpkgs_version: '${{ steps.nixpkgs-version.outputs.version }}'
    steps:
      - name: 'Checkout Repository üõéÔ∏è'
        uses: 'actions/checkout@v4'
      - name: 'Identify nixpkgs version'
        id: 'nixpkgs-version'
        run: |
          echo "version=$( \
            jq --raw-output '.nodes["nixpkgs-linux-stable"].original.ref' flake.lock \
          )" >> "$GITHUB_OUTPUT"

  build:
    runs-on: 'ubuntu-24.04'
    needs:
      - 'identify'
    services:
      nixos-vm:
        image: 'qemux/qemu'
        env:
          BOOT: 'https://channels.nixos.org/${{ needs.identify.outputs.nixpkgs_version }}/latest-nixos-minimal-x86_64-linux.iso'
          # https://channels.nixos.org/${{ needs.identify.outputs.nixpkgs_version }}/latest-nixos-minimal-${{ fromJSON('{"X64": "x86_64"}')['X64'] }}-linux.iso
          # ARGUMENTS: -boot menu=off
        options: '--cap-add NET_ADMIN --device /dev/kvm --device /dev/net/tun'
    steps:
      - name: 'Checkout Repository üõéÔ∏è'
        uses: 'actions/checkout@v4'
      - name: 'Install Nix ‚ùÑÔ∏è'
        # uses: 'cachix/install-nix-action@v31'
        # with:
        #   nix_path: nixpkgs=channel:nixos-unstable
        uses: 'DeterminateSystems/determinate-nix-action@v3'
      # - name: 'Build NixOS flake üèóÔ∏è'
      #   run: nix build .#nixosConfigurations.haleakala.config.system.build.toplevel
      - name: SSH Remote Commands
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: nixos-vm
          # timeout:
          username: nixos
          password: password
          script: |
            uname -ra
            echo $SHELL
      # - name: Start VM and Run Tests
      #   run: |
      #     VM_PATH=$(readlink -f result)
      #     qemu-system-x86_64 \
      #       -drive "file=$VM_PATH/disk.img,format=raw" \
      #       -m 2048 \
      #       -smp 2 \
      #       -nic user,model=virtio-net-pci,hostfwd=tcp::2222-:22 \
      #       -nographic \
      #       -daemonize

      #     # Wait for SSH to be available
      #     for i in $(seq 1 60); do
      #       ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 2222 root@localhost "echo 'SSH is up!'" && break
      #       sleep 5
      #     done

      #     # Run nixos-rebuild check inside VM
      #     ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 2222 root@localhost "nixos-rebuild check --flake /etc/nixos#host --show-trace"

      #     # Run nixos-rebuild switch inside VM
      #     ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 2222 root@localhost "nixos-rebuild switch --flake /etc/nixos#host --show-trace"

      #     # Test if VM boots (already implicitly tested by SSH)
      #     echo "VM booted successfully and SSH is accessible."

      #     # Test if k3s is running
      #     ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 2222 root@localhost "systemctl is-active k3s"

      #     # Test SSH into the machine (already implicitly tested)
      #     echo "SSH access confirmed."
